// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SmartContract {
    uint256 public contractBalance;
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    function deposit() external payable {
        // Use require to check that the deposited amount is greater than zero
        require(msg.value > 0, "Amount must be greater than zero");
        
        // Use assert to ensure that the addition does not overflow
        assert(contractBalance + msg.value >= contractBalance);

        // Update the contract balance
        contractBalance += msg.value;
    }

    function withdraw(uint256 amount) external {
        // Use require to check that the contract has enough balance to cover the withdrawal
        require(contractBalance >= amount, "Insufficient balance");
        
        // Use revert to return the excess amount to the sender
        if (amount < contractBalance) {
            uint256 excessAmount = contractBalance - amount;
            contractBalance -= excessAmount;
            payable(msg.sender).transfer(excessAmount);
        }

        // Update the contract balance after the withdrawal
        contractBalance -= amount;
        
        // Use assert to ensure that the subtraction does not underflow
        assert(contractBalance >= 0);
    }
}
